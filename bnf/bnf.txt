prog            : stmt*
stmt            : decl-stmt | expr-stmt | null-stmt | if-stmt | block-stmt | for-stmt | break-stmt | continue-stmt
null-stmt       : ";"
decl-stmt       : "int" identifier ("=" expr)? ("," identifier ("=" expr)?)* ";"
expr-stmt       : expr ";"
if-stmt         : "if" "(" expr ")" stmt  ("else" stmt )?
for-stmt        : "for" "(" expr?       ; expr? ";" expr? ")"  stmt  
                : "for" "(" decl-stmt?  ; expr? ";" expr? ")"  stmt  
break-stmt      : "break" ";"
continue-stmt   : "continue" ";"
block-stmt      : "{" stmt* "}"
expr            : assign-expr | equal-expr
assign-expr     : identifier ("=" expr)+     
equal-expr      : relational-expr ( ("==" | "!=") relational-expr)*
relational-expr : add-expr (( ">" |"<" | "<=" | ">=") add-expr)*
add-expr        : mult-expr ( ("+" | "_") mult-expr)*
mult-expr       : primary-expr ( ("*" | "/") primary-expr)*
primary-expr    : identifier | number | "(" expr ")"
number          : ([0-9])+
identifier      : (a-zA-Z)(a-zA-Z0-9)*
